digraph "Packs Inheritance" {
c2371_UUPSUpgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>UUPSUpgradeable</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _checkProxy()</TD></TR><TR><TD align="left">    _checkNotDelegated()</TD></TR><TR><TD align="left">    _authorizeUpgrade(address)</TD></TR><TR><TD align="left">    _upgradeToAndCallUUPS(address,bytes)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    onlyProxy()</TD></TR><TR><TD align="left">    notDelegated()</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    UPGRADE_INTERFACE_VERSION</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    __self</TD></TR></TABLE> >];
c775_AccessControlUpgradeable -> c1043_Initializable [ label="1" ];
c775_AccessControlUpgradeable -> c1089_ContextUpgradeable [ label="2" ];
c775_AccessControlUpgradeable -> c1762_ERC165Upgradeable [ label="3" ];
c775_AccessControlUpgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>AccessControlUpgradeable</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _getAccessControlStorage()</TD></TR><TR><TD align="left">    __AccessControl_init()</TD></TR><TR><TD align="left">    __AccessControl_init_unchained()</TD></TR><TR><TD align="left">    _checkRole(bytes32)</TD></TR><TR><TD align="left">    _checkRole(bytes32,address)</TD></TR><TR><TD align="left">    _setRoleAdmin(bytes32,bytes32)</TD></TR><TR><TD align="left">    _grantRole(bytes32,address)</TD></TR><TR><TD align="left">    _revokeRole(bytes32,address)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    onlyRole(bytes32)</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    DEFAULT_ADMIN_ROLE</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    AccessControlStorageLocation</TD></TR></TABLE> >];
c1043_Initializable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Initializable</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _checkInitializing()</TD></TR><TR><TD align="left">    _disableInitializers()</TD></TR><TR><TD align="left">    _getInitializedVersion()</TD></TR><TR><TD align="left">    _isInitializing()</TD></TR><TR><TD align="left">    _initializableStorageSlot()</TD></TR><TR><TD align="left">    _getInitializableStorage()</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    initializer()</TD></TR><TR><TD align="left">    reinitializer(uint64)</TD></TR><TR><TD align="left">    onlyInitializing()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    INITIALIZABLE_STORAGE</TD></TR></TABLE> >];
c1089_ContextUpgradeable -> c1043_Initializable;
c1089_ContextUpgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ContextUpgradeable</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    __Context_init()</TD></TR><TR><TD align="left">    __Context_init_unchained()</TD></TR><TR><TD align="left">    _msgSender()</TD></TR><TR><TD align="left">    _msgData()</TD></TR><TR><TD align="left">    _contextSuffixLength()</TD></TR></TABLE> >];
c1249_PausableUpgradeable -> c1043_Initializable [ label="1" ];
c1249_PausableUpgradeable -> c1089_ContextUpgradeable [ label="2" ];
c1249_PausableUpgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>PausableUpgradeable</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _getPausableStorage()</TD></TR><TR><TD align="left">    __Pausable_init()</TD></TR><TR><TD align="left">    __Pausable_init_unchained()</TD></TR><TR><TD align="left">    _requireNotPaused()</TD></TR><TR><TD align="left">    _requirePaused()</TD></TR><TR><TD align="left">    _pause()</TD></TR><TR><TD align="left">    _unpause()</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    whenNotPaused()</TD></TR><TR><TD align="left">    whenPaused()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    PausableStorageLocation</TD></TR></TABLE> >];
c1378_ReentrancyGuardUpgradeable -> c1043_Initializable;
c1378_ReentrancyGuardUpgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ReentrancyGuardUpgradeable</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _getReentrancyGuardStorage()</TD></TR><TR><TD align="left">    __ReentrancyGuard_init()</TD></TR><TR><TD align="left">    __ReentrancyGuard_init_unchained()</TD></TR><TR><TD align="left">    _nonReentrantBefore()</TD></TR><TR><TD align="left">    _nonReentrantAfter()</TD></TR><TR><TD align="left">    _reentrancyGuardEntered()</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    nonReentrant()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    NOT_ENTERED</TD></TR><TR><TD align="left">    ENTERED</TD></TR><TR><TD align="left">    ReentrancyGuardStorageLocation</TD></TR></TABLE> >];
c1722_EIP712Upgradeable -> c1043_Initializable;
c1722_EIP712Upgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>EIP712Upgradeable</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _getEIP712Storage()</TD></TR><TR><TD align="left">    __EIP712_init(string,string)</TD></TR><TR><TD align="left">    __EIP712_init_unchained(string,string)</TD></TR><TR><TD align="left">    _domainSeparatorV4()</TD></TR><TR><TD align="left">    _buildDomainSeparator()</TD></TR><TR><TD align="left">    _hashTypedDataV4(bytes32)</TD></TR><TR><TD align="left">    _EIP712Name()</TD></TR><TR><TD align="left">    _EIP712Version()</TD></TR><TR><TD align="left">    _EIP712NameHash()</TD></TR><TR><TD align="left">    _EIP712VersionHash()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    TYPE_HASH</TD></TR><TR><TD align="left">    EIP712StorageLocation</TD></TR></TABLE> >];
c1762_ERC165Upgradeable -> c1043_Initializable;
c1762_ERC165Upgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ERC165Upgradeable</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    __ERC165_init()</TD></TR><TR><TD align="left">    __ERC165_init_unchained()</TD></TR></TABLE> >];
c10920_LuckyBuy -> c11965_MEAccessControlUpgradeable [ label="1" ];
c10920_LuckyBuy -> c1249_PausableUpgradeable [ label="2" ];
c10920_LuckyBuy -> c1378_ReentrancyGuardUpgradeable [ label="4" ];
c10920_LuckyBuy -> c12953_TokenRescuer [ label="5" ];
c11080_LuckyBuyInitializable -> c2371_UUPSUpgradeable [ label="2" ];
c11965_MEAccessControlUpgradeable -> c775_AccessControlUpgradeable;
c11965_MEAccessControlUpgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>MEAccessControlUpgradeable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    transferAdmin(address)</TD></TR><TR><TD align="left">    addOpsUser(address)</TD></TR><TR><TD align="left">    removeOpsUser(address)</TD></TR><TR><TD align="left">    addRescueUser(address)</TD></TR><TR><TD align="left">    removeRescueUser(address)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    __MEAccessControl_init()</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    OPS_ROLE</TD></TR><TR><TD align="left">    RESCUE_ROLE</TD></TR></TABLE> >];
c12021_AbstractSignatureVerifierUpgradeable -> c1722_EIP712Upgradeable;
c12021_AbstractSignatureVerifierUpgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>AbstractSignatureVerifierUpgradeable</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    __AbstractSignatureVerifier_init(string,string)</TD></TR><TR><TD align="left">    _verify(bytes32,bytes)</TD></TR></TABLE> >];
c12147_LuckyBuySignatureVerifierUpgradeable -> c12021_AbstractSignatureVerifierUpgradeable;
c12392_PacksSignatureVerifierUpgradeable -> c12021_AbstractSignatureVerifierUpgradeable;
c12392_PacksSignatureVerifierUpgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>PacksSignatureVerifierUpgradeable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    hashCommit(PacksSignatureVerifierUpgradeable.CommitData)</TD></TR><TR><TD align="left">    hashPack(PacksSignatureVerifierUpgradeable.PackType,uint256,PacksSignatureVerifierUpgradeable.BucketData[])</TD></TR><TR><TD align="left">    hashFulfillment(bytes32,address,uint256,bytes,address,uint256,uint256,PacksSignatureVerifierUpgradeable.FulfillmentOption)</TD></TR><TR><TD align="left">    verifyCommit(PacksSignatureVerifierUpgradeable.CommitData,bytes)</TD></TR><TR><TD align="left">    verifyHash(bytes32,bytes)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    __PacksSignatureVerifier_init(string,string)</TD></TR><TR><TD align="left">    _hashCommit(PacksSignatureVerifierUpgradeable.CommitData)</TD></TR><TR><TD align="left">    _verifyCommit(PacksSignatureVerifierUpgradeable.CommitData,bytes)</TD></TR><TR><TD align="left">    _verifyHash(bytes32,bytes)</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _TYPE_HASH</TD></TR></TABLE> >];
c12953_TokenRescuer[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>TokenRescuer</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _rescueERC20Batch(address[],address[],uint256[])</TD></TR><TR><TD align="left">    _rescueERC721Batch(address[],address[],uint256[])</TD></TR><TR><TD align="left">    _rescueERC1155Batch(address[],address[],uint256[],uint256[])</TD></TR><TR><TD align="left">    _rescueETH(address,uint256)</TD></TR></TABLE> >];
c13559_Packs -> c14722_PacksAdmin [ label="1" ];
c13559_Packs -> c15583_PacksCommit [ label="2" ];
c13559_Packs -> c16462_PacksFulfill [ label="3" ];
c13559_Packs -> c14912_PacksCancel [ label="4" ];
c13559_Packs[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Packs</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    commit(address,address,uint256,PacksSignatureVerifierUpgradeable.PackType,PacksSignatureVerifierUpgradeable.BucketData[],bytes)</TD></TR><TR><TD align="left">    fulfill(uint256,address,bytes,uint256,address,uint256,uint256,bytes,bytes,PacksSignatureVerifierUpgradeable.FulfillmentOption)</TD></TR><TR><TD align="left">    fulfillByDigest(bytes32,address,bytes,uint256,address,uint256,uint256,bytes,bytes,PacksSignatureVerifierUpgradeable.FulfillmentOption)</TD></TR><TR><TD align="left">    cancel(uint256)</TD></TR><TR><TD align="left">    withdrawTreasury(uint256)</TD></TR><TR><TD align="left">    emergencyWithdraw()</TD></TR><TR><TD align="left">    receive()</TD></TR><TR><TD align="left">    addCosigner(address)</TD></TR><TR><TD align="left">    removeCosigner(address)</TD></TR><TR><TD align="left">    setCommitCancellableTime(uint256)</TD></TR><TR><TD align="left">    setNftFulfillmentExpiryTime(uint256)</TD></TR><TR><TD align="left">    setMinReward(uint256)</TD></TR><TR><TD align="left">    setMaxReward(uint256)</TD></TR><TR><TD align="left">    setMinPackPrice(uint256)</TD></TR><TR><TD align="left">    setMaxPackPrice(uint256)</TD></TR><TR><TD align="left">    setMinPackRewardMultiplier(uint256)</TD></TR><TR><TD align="left">    setMaxPackRewardMultiplier(uint256)</TD></TR><TR><TD align="left">    setProtocolFee(uint256)</TD></TR><TR><TD align="left">    setFlatFee(uint256)</TD></TR><TR><TD align="left">    setFundsReceiver(address)</TD></TR><TR><TD align="left">    transferFundsReceiverManager(address)</TD></TR><TR><TD align="left">    pause()</TD></TR><TR><TD align="left">    unpause()</TD></TR><TR><TD align="left">    getPacksLength()</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    _transferFundsReceiverManager(address)</font></TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    onlyCommitOwnerOrCosigner(uint256)</TD></TR></TABLE> >];
c13749_PacksInitializable -> c13559_Packs [ label="1" ];
c13749_PacksInitializable -> c2371_UUPSUpgradeable [ label="2" ];
c13749_PacksInitializable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>PacksInitializable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    initialize(uint256,uint256,address,address,address,address)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    _authorizeUpgrade(address)</font></TD></TR></TABLE> >];
c14722_PacksAdmin -> c11965_MEAccessControlUpgradeable [ label="1" ];
c14722_PacksAdmin -> c1378_ReentrancyGuardUpgradeable [ label="2" ];
c14722_PacksAdmin -> c1249_PausableUpgradeable [ label="3" ];
c14722_PacksAdmin -> c16562_PacksStorage [ label="4" ];
c14722_PacksAdmin -> c12953_TokenRescuer [ label="5" ];
c14722_PacksAdmin[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>PacksAdmin</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    rescueERC20(address,address,uint256)</TD></TR><TR><TD align="left">    rescueERC721(address,address,uint256)</TD></TR><TR><TD align="left">    rescueERC1155(address,address,uint256,uint256)</TD></TR><TR><TD align="left">    rescueERC20Batch(address[],address[],uint256[])</TD></TR><TR><TD align="left">    rescueERC721Batch(address[],address[],uint256[])</TD></TR><TR><TD align="left">    rescueERC1155Batch(address[],address[],uint256[],uint256[])</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _addCosigner(address)</TD></TR><TR><TD align="left">    _removeCosigner(address)</TD></TR><TR><TD align="left">    _updateCommitCancellableTime(uint256)</TD></TR><TR><TD align="left">    _updateNftFulfillmentExpiryTime(uint256)</TD></TR><TR><TD align="left">    _updateMinReward(uint256)</TD></TR><TR><TD align="left">    _updateMaxReward(uint256)</TD></TR><TR><TD align="left">    _updateMinPackPrice(uint256)</TD></TR><TR><TD align="left">    _updateMaxPackPrice(uint256)</TD></TR><TR><TD align="left">    _updateMinPackRewardMultiplier(uint256)</TD></TR><TR><TD align="left">    _updateMaxPackRewardMultiplier(uint256)</TD></TR><TR><TD align="left">    _setProtocolFee(uint256)</TD></TR><TR><TD align="left">    _setFlatFee(uint256)</TD></TR><TR><TD align="left">    _setFundsReceiver(address)</TD></TR><TR><TD align="left">    _withdrawTreasury(uint256)</TD></TR><TR><TD align="left">    _emergencyWithdraw()</TD></TR><TR><TD align="left">    _transferFundsReceiverManager(address)</TD></TR></TABLE> >];
c14912_PacksCancel -> c16562_PacksStorage;
c14912_PacksCancel[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>PacksCancel</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _cancel(uint256)</TD></TR><TR><TD align="left">    _validateCancellationRequest(uint256)</TD></TR><TR><TD align="left">    _calculateAndUpdateRefund(uint256,uint256)</TD></TR><TR><TD align="left">    _processRefund(uint256,address,uint256,PacksSignatureVerifierUpgradeable.CommitData)</TD></TR></TABLE> >];
c15583_PacksCommit -> c16562_PacksStorage;
c15583_PacksCommit[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>PacksCommit</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    calculateContributionWithoutFee(uint256,uint256)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _commit(address,address,uint256,PacksSignatureVerifierUpgradeable.PackType,PacksSignatureVerifierUpgradeable.BucketData[],bytes)</TD></TR><TR><TD align="left">    _validateAndCalculatePackPrice(uint256)</TD></TR><TR><TD align="left">    _validateCommitAddresses(address,address)</TD></TR><TR><TD align="left">    _validateBuckets(PacksSignatureVerifierUpgradeable.BucketData[],uint256)</TD></TR><TR><TD align="left">    _validateBucketValues(PacksSignatureVerifierUpgradeable.BucketData,uint256)</TD></TR><TR><TD align="left">    _validateBucketOdds(PacksSignatureVerifierUpgradeable.BucketData)</TD></TR><TR><TD align="left">    _verifyPackSignature(PacksSignatureVerifierUpgradeable.PackType,uint256,PacksSignatureVerifierUpgradeable.BucketData[],bytes,address)</TD></TR><TR><TD align="left">    _createCommit(address,address,uint256,uint256,PacksSignatureVerifierUpgradeable.BucketData[],bytes32)</TD></TR><TR><TD align="left">    _processCommitFees(uint256,uint256)</TD></TR><TR><TD align="left">    _setCommitExpiryTimes(uint256)</TD></TR><TR><TD align="left">    _handleFlatFeePayment()</TD></TR></TABLE> >];
c16462_PacksFulfill -> c16562_PacksStorage;
c16462_PacksFulfill[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>PacksFulfill</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _fulfill(uint256,address,bytes,uint256,address,uint256,uint256,bytes,bytes,PacksSignatureVerifierUpgradeable.FulfillmentOption)</TD></TR><TR><TD align="left">    _validateFulfillmentRequest(uint256,address,uint256,uint256)</TD></TR><TR><TD align="left">    _verifyFulfillmentSignatures(PacksSignatureVerifierUpgradeable.CommitData,bytes,bytes,address,bytes,uint256,address,uint256,uint256,PacksSignatureVerifierUpgradeable.FulfillmentOption)</TD></TR><TR><TD align="left">    _determineOutcomeAndValidate(uint256,PacksSignatureVerifierUpgradeable.BucketData[],uint256,uint256)</TD></TR><TR><TD align="left">    _getBucketIndex(uint256,PacksSignatureVerifierUpgradeable.BucketData[])</TD></TR><TR><TD align="left">    _determineFulfillmentType(uint256,PacksSignatureVerifierUpgradeable.FulfillmentOption)</TD></TR><TR><TD align="left">    _markFulfilledAndUpdateBalances(uint256,uint256)</TD></TR><TR><TD align="left">    _executeFulfillment(uint256,PacksSignatureVerifierUpgradeable.CommitData,address,bytes,uint256,address,uint256,uint256,uint256,PacksSignatureVerifierUpgradeable.BucketData,uint256,PacksSignatureVerifierUpgradeable.FulfillmentOption,PacksSignatureVerifierUpgradeable.FulfillmentOption,bytes32)</TD></TR><TR><TD align="left">    _executeNFTFulfillment(uint256,PacksSignatureVerifierUpgradeable.CommitData,address,bytes,uint256,address,uint256,uint256,PacksSignatureVerifierUpgradeable.BucketData,uint256,PacksSignatureVerifierUpgradeable.FulfillmentOption,PacksSignatureVerifierUpgradeable.FulfillmentOption,bytes32)</TD></TR><TR><TD align="left">    _tryFulfillNFTOrder(address,bytes,uint256)</TD></TR><TR><TD align="left">    _executePayoutFulfillment(uint256,PacksSignatureVerifierUpgradeable.CommitData,uint256,uint256,PacksSignatureVerifierUpgradeable.BucketData,uint256,PacksSignatureVerifierUpgradeable.FulfillmentOption,PacksSignatureVerifierUpgradeable.FulfillmentOption,bytes32)</TD></TR><TR><TD align="left">    _depositTreasury(uint256)</TD></TR></TABLE> >];
c16562_PacksStorage -> c12392_PacksSignatureVerifierUpgradeable;
c16562_PacksStorage[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>PacksStorage</B></TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    PRNG<font color="blue" POINT-SIZE="10"> (IPRNG)</font></TD></TR><TR><TD align="left">    fundsReceiver</TD></TR><TR><TD align="left">    packs</TD></TR><TR><TD align="left">    commitIdByDigest</TD></TR><TR><TD align="left">    treasuryBalance</TD></TR><TR><TD align="left">    commitBalance</TD></TR><TR><TD align="left">    MIN_COMMIT_CANCELLABLE_TIME</TD></TR><TR><TD align="left">    commitCancellableTime</TD></TR><TR><TD align="left">    commitCancellableAt</TD></TR><TR><TD align="left">    MIN_NFT_FULFILLMENT_EXPIRY_TIME</TD></TR><TR><TD align="left">    nftFulfillmentExpiryTime</TD></TR><TR><TD align="left">    nftFulfillmentExpiresAt</TD></TR><TR><TD align="left">    FUNDS_RECEIVER_MANAGER_ROLE</TD></TR><TR><TD align="left">    isCosigner</TD></TR><TR><TD align="left">    packCount</TD></TR><TR><TD align="left">    isFulfilled</TD></TR><TR><TD align="left">    isCancelled</TD></TR><TR><TD align="left">    minReward</TD></TR><TR><TD align="left">    maxReward</TD></TR><TR><TD align="left">    minPackPrice</TD></TR><TR><TD align="left">    maxPackPrice</TD></TR><TR><TD align="left">    minPackRewardMultiplier</TD></TR><TR><TD align="left">    maxPackRewardMultiplier</TD></TR><TR><TD align="left">    MIN_BUCKETS</TD></TR><TR><TD align="left">    MAX_BUCKETS</TD></TR><TR><TD align="left">    BASE_POINTS</TD></TR><TR><TD align="left">    protocolFee</TD></TR><TR><TD align="left">    protocolBalance</TD></TR><TR><TD align="left">    feesPaid</TD></TR><TR><TD align="left">    flatFee</TD></TR></TABLE> >];
}
