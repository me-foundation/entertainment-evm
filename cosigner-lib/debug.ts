import { ethers } from "ethers";

/**
 * Hashes multiple parameters together exactly as the Solidity implementation would
 *
 * @param to The recipient address
 * @param value The amount value (BigInt or number)
 * @param data The bytes data as string or Uint8Array
 * @param tokenAddress The token contract address
 * @param tokenId The token ID (BigInt or number)
 * @returns The keccak256 hash of the combined parameters
 */
function hashEnhancedData(
  to: string,
  value: bigint | number,
  data: string | Uint8Array,
  tokenAddress: string,
  tokenId: bigint | number
): string {
  // Convert all parameters to their appropriate types for encoding
  const addressTo = ethers.getAddress(to); // Normalize address format
  const bigValue = BigInt(value); // Ensure it's a BigInt for encoding

  // Handle data based on type
  let bytesData: Uint8Array;
  if (typeof data === "string") {
    // If it's a hex string
    if (data.startsWith("0x")) {
      bytesData = ethers.getBytes(data);
    } else {
      // If it's a normal string, convert to UTF-8 bytes
      bytesData = ethers.toUtf8Bytes(data);
    }
  } else {
    // It's already a Uint8Array
    bytesData = data;
  }

  const tokenAddr = ethers.getAddress(tokenAddress); // Normalize address
  const bigTokenId = BigInt(tokenId); // Ensure it's a BigInt

  // Use ABI encoding to match Solidity's abi.encode exactly
  const encodedData = ethers.AbiCoder.defaultAbiCoder().encode(
    ["address", "uint256", "bytes", "address", "uint256"],
    [addressTo, bigValue, bytesData, tokenAddr, bigTokenId]
  );

  // Hash the encoded data
  const hash = ethers.keccak256(encodedData);

  return hash;
}

// Example usage with test data
function runTest() {
  // Test parameters
  const testTo = "0x0000000000000068F116a894984e2DB1123eB395";
  const testValue = 20000000000000n; // 1 ETH in wei
  const testData =
    "0xe7acab24000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000006e00000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000000000000000000000000000e052c9cfe22b5974dc821cba907f1daac7979c9400000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000db2536a038f68a2c4d5f7428a98299cf566a59a000000000000000000000000004c00500000ad104d7dbd00e3ae0a5c00560c000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000067cf174c0000000000000000000000000000000000000000000000000000000067d30b520000000000000000000000000000000000000000000000000000000000000000360c6ebe000000000000000000000000000000000000000033c2f8be86434b860000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000415a82e77642113701fe190554fddd7701c3beedb780000000000000000000000000000000000000000000000000000001101eedb78000000000000000000000000000db2536a038f68a2c4d5f7428a98299cf566a59a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000174876e800000000000000000000000000000000000000000000000000000000174876e8000000000000000000000000000000a26b00c1f0df003000390027140000faa719000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001176592e000000000000000000000000000000000000000000000000000000001176592e0000000000000000000000000005d0d2229c75f13cb989bc5b48966f19170e879c600000000000000000000000000000000000000000000000000000000000000e3937d7c3c7bad7cce0343e161705a5cb7174c4b10366d4501fc48bddb0466cef2657da121e80b7e9e8dc7580fd672177fc431ed96a3bfdaa8160c2619c247a10500000f5555e3c5fe5d036886ef457c6099624d36106d0a7a5963416e619e0dd70ef5afb6c923cf26789f0637c18b43ad5509d0ad354daf1410a3574aebf3e5f420371f2e2b5d598b446140dc14a0a0ab918e458caf518097b88a1e2bacf2641058740982e1363e69190f9b615b749711f5529e4ba38f45955fa7a0e2ed592e3d6a88544d8707848281e625f61622aeeccb0af71cff27e28538a891165116f41d8c6dbf0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001d4da48b1ebc9d95";
  const testTokenAddress = "0x415A82E77642113701FE190554fDDD7701c3B262"; // Example token address
  const testTokenId = 8295;

  // Calculate hash
  const hash = hashEnhancedData(
    testTo,
    testValue,
    testData,
    testTokenAddress,
    testTokenId
  );

  console.log("Enhanced Hash Test:");
  console.log(`To Address: ${testTo}`);
  console.log(`Value: ${testValue.toString()} wei`);
  console.log(`Data: ${testData}`);
  console.log(`Token Address: ${testTokenAddress}`);
  console.log(`Token ID: ${testTokenId.toString()}`);
  console.log(`\nResulting Hash: ${hash}`);
  console.log(`\nTo verify this matches the Solidity implementation, call:`);
  console.log(`hashEnhancedDataView(
    ${testTo},
    ${testValue.toString()},
    hex"${testData.substring(2)}",
    ${testTokenAddress},
    ${testTokenId.toString()}
  )`);
}

// Run the example
runTest();
