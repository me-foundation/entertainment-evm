// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

import "./PacksScriptBase.s.sol";

contract CommitAndFulfillPack is PacksScriptBase {
    address payable public constant PACKS = payable(0xc8Cc8DdEb82CCbbC6d6bc67047381bB6a8842F5b);
    uint256 public constant PACK_PRICE = 0.01 ether;
    uint256 public constant SEED = 12345;

    function run() external {
        // Check if we want NFT or payout fulfillment
        bool isNFTFulfillment = vm.envBool("USE_PACKS_NFT_FULFILLMENT");
        console.log("Fulfillment Type:", isNFTFulfillment ? "NFT" : "Payout");

        uint256 deployerPrivateKey = vm.envUint("PACKS_DEPLOYER_PRIVATE_KEY");
        address deployer = vm.addr(deployerPrivateKey);
        console.log("Deployer", deployer);

        uint256 cosignerPrivateKey = vm.envUint("PACKS_COSIGNER_PRIVATE_KEY");
        address cosigner = vm.addr(cosignerPrivateKey);
        console.log("Cosigner", cosigner);

        uint256 playerPrivateKey = vm.envUint("PACKS_PLAYER_PRIVATE_KEY");
        address player = vm.addr(playerPrivateKey);
        console.log("Player", player);

        // Get the Packs contract instance
        PacksInitializable packs = PacksInitializable(PACKS);

        // Add cosigner
        vm.startBroadcast(deployerPrivateKey);
        if (!packs.isCosigner(cosigner)) {
            packs.addCosigner(cosigner);
        }
        vm.stopBroadcast();

        // Get default buckets
        IPacksSignatureVerifier.BucketData[] memory buckets = setupDefaultBuckets();

        // 1. Sign the pack data
        bytes memory packSignature = signPack(packs, PACK_PRICE, buckets, cosignerPrivateKey);

        // 2. Commit to the pack
        vm.startBroadcast(playerPrivateKey);
        uint256 commitId = packs.commit{value: PACK_PRICE}(
            player, // receiver
            cosigner, // cosigner
            SEED,
            buckets,
            packSignature
        );
        vm.stopBroadcast();
        console.log("Commit ID:", commitId);

        // 3. Get commit data for fulfillment
        IPacksSignatureVerifier.CommitData memory commitData = IPacksSignatureVerifier.CommitData({
            id: commitId,
            receiver: player,
            cosigner: cosigner,
            seed: SEED,
            counter: 0,
            packPrice: PACK_PRICE,
            payoutBps: packs.payoutBps(),
            buckets: buckets,
            packHash: packs.hashPack(PACK_PRICE, buckets)
        });

        // 4. Sign the commit data
        bytes memory commitSignature =
            signCommit(packs, commitId, player, cosigner, SEED, 0, PACK_PRICE, buckets, cosignerPrivateKey);

        // 5. Calculate RNG value
        uint256 rng = IPRNG(packs.PRNG()).rng(commitSignature);
        console.log("RNG Value:", rng);

        // 6. Prepare order data for fulfillment
        address marketplace = 0x1aeD60A97192157fDA7fb26267A439d523d09c5e;
        address token = 0xd45E54B1A5e77d6E9469a4174d34f27D5D16270C;
        uint256 tokenId = 487;
        uint256 orderAmount = 0.0112 ether;
        bytes memory orderData =
            "0x760f2a0b000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000d8f24f5f0382e197c1e87ad82b357209383470cf00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000027ca7096640200000000000000000000000000000000000000000000000000000000000000076476af662900000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000B645383908EF0934402958AE924734E03097de00000000000000000000000000B645383908EF0934402958AE924734E03097de00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000027ca7096640200000000000000000000000000000000000000000000000000000000000000074000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000000000000000000000000000000000005c00000000000000000000000008d86563aaa3bf9d9db6133b83844da43e4591fff000000000000000000000000000056f7000000ece9003ca63978907a00ffd10000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000686405b30000000000000000000000000000000000000000000000000000000068ab997000000000000000000000000000000000000000000000000000000000000000003d958fe200000000000000000000000000000000000000002cb2293dcb9437360000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000d45e54b1a5e77d6e9469a4174d34f27d5d16270c00000000000000000000000000000000000000000000000000000000000001e7000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002665ea163f3a40000000000000000000000000000000000000000000000000002665ea163f3a400000000000000000000000008d86563aaa3bf9d9db6133b83844da43e4591fff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000032eea4978a40000000000000000000000000000000000000000000000000000032eea4978a400000000000000000000000000000a26b00c1f0df003000390027140000faa71900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013197db8d3d8000000000000000000000000000000000000000000000000000013197db8d3d8000000000000000000000000033a7a26d9c6c799a02e4870137de647674371ffc0000000000000000000000000000000000000000000000000000000000000063203a73efa76efe5229dac3f81465ff61829aa2b512d5b5454651efc2a94007138fe3dbbab888e7528c4489d8a0d5a45c96f1e89b20746fe7345d18030e4730be000000c05c6f8b4a2901b70c47b4582a551657cc2348cc151d07b1ab2832cece7c54ed0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009200d8f24f5f0382e197c1e87ad82b357209383470cf0000000068767065656182a7f74e32e96d01470f2808e1ffc9d1057d18c23c0a432102ad5577ec1d05a228b77d2d3eaee65f4aca0b3709735089badfe69d8e2b53813610a4691dc6080000000000000000000000000000000000000000000000000000000000000000721c002b0059009a671d00ad1700c9748146cd1b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001d4da48b0e1c0c38";

        // 7. Sign the order
        bytes memory orderSignature = signOrder(
            packs,
            commitData,
            marketplace,
            orderAmount,
            orderData,
            token,
            tokenId,
            IPacksSignatureVerifier.FulfillmentOption.NFT,
            cosignerPrivateKey
        );

        // 8. Sign the choice
        IPacksSignatureVerifier.FulfillmentOption fulfillmentOption = isNFTFulfillment
            ? IPacksSignatureVerifier.FulfillmentOption.NFT
            : IPacksSignatureVerifier.FulfillmentOption.Payout;

        uint256 choiceSignerPrivateKey = isNFTFulfillment ? playerPrivateKey : cosignerPrivateKey;

        bytes memory choiceSignature = signChoice(packs, commitData, fulfillmentOption, choiceSignerPrivateKey);

        // 9. Fulfill the pack
        vm.startBroadcast(cosignerPrivateKey);
        packs.fulfill{value: orderAmount}(
            commitId,
            marketplace,
            orderData,
            orderAmount,
            token,
            tokenId,
            commitSignature,
            orderSignature,
            fulfillmentOption,
            choiceSignature
        );
        vm.stopBroadcast();

        console.log("Pack fulfilled successfully with", isNFTFulfillment ? "NFT" : "Payout", "option");
    }
}
