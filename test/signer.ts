// test.ts or test.js
import { ethers } from "ethers";
import { MagicSigner } from "../cosigner-lib";
import dotenv from "dotenv";

dotenv.config();

async function testMagicSignerCommitData() {
  try {
    if (!process.env.PRIVATE_KEY) {
      throw new Error("Missing private keys in environment variable");
    }

    const contract = ethers.getAddress(
      "0x522B3294E6d06aA25Ad0f1B8891242E335D3B459"
    ); // match solidity tests
    const chainId = 1; // Anvil

    const signer = new MagicSigner({
      contract,
      privateKey: process.env.PRIVATE_KEY,
      chainId,
    });

    console.log("Signer address:", signer.address);

    const id = BigInt(1);
    const receiver = "0x094F4431AFd206073476B4300D3a7cbC76D39D17";
    const cosigner = "0xE052c9CFe22B5974DC821cBa907F1DAaC7979c94";
    const seed = BigInt(12345);
    const counter = BigInt(0);
    const orderHash =
      "0x00b839f580603f650be760ccd549d9ddbb877aa80ccf709f00f1950f51c35a99";
    const amount = BigInt(20000000000000);
    const reward = BigInt(20000000000000);

    const result1 = await signer.signCommit(
      id,
      receiver,
      cosigner,
      seed,
      counter,
      orderHash,
      amount,
      reward
    );

    console.log("Commit:", result1.commit);
    console.log("\nSignature:", result1.signature);
    console.log("\nCall Data:", result1.callData);
    console.log("Signer Address:", signer.address);
    console.log("Digest:", result1.digest);
  } catch (error) {
    console.error("Test failed:", error);
  }
}

async function testMagicSignerOrderHashData() {
  try {
    if (!process.env.PRIVATE_KEY) {
      throw new Error("Missing private keys in environment variable");
    }

    const contract = "0xE052c9CFe22B5974DC821cBa907F1DAaC7979c94"; // This won't matter for the order hash, it's just a keccak256
    const chainId = 1; // Anvil

    const signer = new MagicSigner({
      contract,
      privateKey: process.env.PRIVATE_KEY,
      chainId,
    });

    const testTo = "0x0000000000000068F116a894984e2DB1123eB395";
    const testValue = 20000000000000n;
    const testData =
      "0xe7acab24000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000006e00000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000000000000000000000000000e052c9cfe22b5974dc821cba907f1daac7979c9400000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000db2536a038f68a2c4d5f7428a98299cf566a59a000000000000000000000000004c00500000ad104d7dbd00e3ae0a5c00560c000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000067cf174c0000000000000000000000000000000000000000000000000000000067d30b520000000000000000000000000000000000000000000000000000000000000000360c6ebe000000000000000000000000000000000000000033c2f8be86434b860000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000415a82e77642113701fe190554fddd7701c3beedb780000000000000000000000000000000000000000000000000000001101eedb78000000000000000000000000000db2536a038f68a2c4d5f7428a98299cf566a59a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000174876e800000000000000000000000000000000000000000000000000000000174876e8000000000000000000000000000000a26b00c1f0df003000390027140000faa719000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001176592e000000000000000000000000000000000000000000000000000000001176592e0000000000000000000000000005d0d2229c75f13cb989bc5b48966f19170e879c600000000000000000000000000000000000000000000000000000000000000e3937d7c3c7bad7cce0343e161705a5cb7174c4b10366d4501fc48bddb0466cef2657da121e80b7e9e8dc7580fd672177fc431ed96a3bfdaa8160c2619c247a10500000f5555e3c5fe5d036886ef457c6099624d36106d0a7a5963416e619e0dd70ef5afb6c923cf26789f0637c18b43ad5509d0ad354daf1410a3574aebf3e5f420371f2e2b5d598b446140dc14a0a0ab918e458caf518097b88a1e2bacf2641058740982e1363e69190f9b615b749711f5529e4ba38f45955fa7a0e2ed592e3d6a88544d8707848281e625f61622aeeccb0af71cff27e28538a891165116f41d8c6dbf0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001d4da48b1ebc9d95";
    const testTokenAddress = "0x415A82E77642113701FE190554fDDD7701c3B262"; // Example token address
    const testTokenId = 8295;

    const digest = await signer.hashOrder(
      testTo,
      testValue,
      testData,
      testTokenAddress,
      testTokenId
    );

    console.log("\nDigest:", digest);
  } catch (error) {
    console.error("Test failed:", error);
  }
}

//testMagicSignerCommitData();
testMagicSignerOrderHashData();
